import sys

DefaultEnvironment(tools=[])
env = Environment(
    PYTHON=sys.executable,
    LINK='$PYTHON mylink.py',
    LINKFLAGS=[],
    CC='$PYTHON mygcc.py cc',
    CXX='$PYTHON mygcc.py c++',
    tools=['gcc','g++','gnulink'],
    MAXLINELENGTH=10,
)
# make sure TempFileMunge is used
if 'TEMPFILE' not in env['CCCOM']:
    env['CCCOM'] = '${TEMPFILE("%s")}'%(env['CCCOM'])

env.Tool('compilation_db')

outputs = []
env_abs = env.Clone(COMPILATIONDB_USE_ABSPATH=True)
outputs+= env_abs.CompilationDatabase('compile_commands_clone_abs.json')

# Should be relative paths
outputs+= env.CompilationDatabase('compile_commands_only_arg.json')
outputs+= env.CompilationDatabase(target='compile_commands_target.json')

# Should default name compile_commands.json
outputs+= env.CompilationDatabase()

# Should be absolute paths
outputs+= env.CompilationDatabase('compile_commands_over_abs.json', COMPILATIONDB_USE_ABSPATH=True)
outputs+= env.CompilationDatabase(target='compile_commands_target_over_abs.json', COMPILATIONDB_USE_ABSPATH=True)

# Should be relative paths
outputs+= env.CompilationDatabase('compile_commands_over_rel.json', COMPILATIONDB_USE_ABSPATH=False)

# Try 1/0 for COMPILATIONDB_USE_ABSPATH
outputs+= env.CompilationDatabase('compile_commands_over_abs_1.json', COMPILATIONDB_USE_ABSPATH=1)
outputs+= env.CompilationDatabase('compile_commands_over_abs_0.json', COMPILATIONDB_USE_ABSPATH=0)

env.Program('main', 'test_main.c')

# Prevent actual call of $PYTHON @tempfile since "mygcc.py cc ..." is not a proper python statement
# Interesting outputs are json databases
env.Default(outputs)
